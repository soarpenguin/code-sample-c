//sudo apt-get install bridge-utils
//
//## 首先，我们先增加一个网桥lxcbr0，模仿docker0
//brctl addbr lxcbr0
//brctl stp lxcbr0 off
//ifconfig lxcbr0 192.168.10.1/24 up #为网桥设置IP地址
// 
//## 接下来，我们要创建一个network namespace - ns1
// 
//# 增加一个namesapce 命令为 ns1 （使用ip netns add命令）
//ip netns add ns1 
// 
//# 激活namespace中的loopback，即127.0.0.1（使用ip netns exec ns1来操作ns1中的命令）
//ip netns exec ns1   ip link set dev lo up 
// 
//## 然后，我们需要增加一对虚拟网卡
// 
//# 增加一个pair虚拟网卡，注意其中的veth类型，其中一个网卡要按进容器中
//ip link add veth-ns1 type veth peer name lxcbr0.1
// 
//# 把 veth-ns1 按到namespace ns1中，这样容器中就会有一个新的网卡了
//ip link set veth-ns1 netns ns1
// 
//# 把容器里的 veth-ns1改名为 eth0 （容器外会冲突，容器内就不会了）
//ip netns exec ns1  ip link set dev veth-ns1 name eth0 
// 
//# 为容器中的网卡分配一个IP地址，并激活它
//ip netns exec ns1 ifconfig eth0 192.168.10.11/24 up
// 
// 
//# 上面我们把veth-ns1这个网卡按到了容器中，然后我们要把lxcbr0.1添加上网桥上
//brctl addif lxcbr0 lxcbr0.1
// 
//# 为容器增加一个路由规则，让容器可以访问外面的网络
//ip netns exec ns1     ip route add default via 192.168.10.1
// 
//# 在/etc/netns下创建network namespce名称为ns1的目录，
//# 然后为这个namespace设置resolv.conf，这样，容器内就可以访问域名了
//mkdir -p /etc/netns/ns1
//echo "nameserver 8.8.8.8" > /etc/netns/ns1/resolv.conf

///////////////////////////////////////////////////////////////////////
// # Create a "demo" namespace
// ip netns add demo
// 
// # create a "veth" pair
// ip link add veth0 type veth peer name veth1
// 
// # and move one to the namespace
// ip link set veth1 netns demo
// 
// # configure the interfaces (up + IP)
// ip netns exec demo ip link set lo up
// ip netns exec demo ip link set veth1 up
// ip netns exec demo ip addr add 169.254.1.2/30 dev veth1
// ip link set veth0 up
// ip addr add 169.254.1.1/30 dev veth0

///////////////////////////////////////////////////////////////////////
//# 可以为正在运行的docker容器增加一个新的网卡：
$ ip link add peerA type veth peer name peerB 
$ brctl addif docker0 peerA 
$ ip link set peerA up 
$ ip link set peerB netns ${container-pid} 
$ ip netns exec ${container-pid} ip link set dev peerB name eth1 
$ ip netns exec ${container-pid} ip link set eth1 up ; 
$ ip netns exec ${container-pid} ip addr add ${ROUTEABLE_IP} dev eth1 ;

$ ip netns help
Usage: ip netns list
       ip netns add NAME
       ip netns set NAME NETNSID
       ip [-all] netns delete [NAME]
       ip netns identify [PID]
       ip netns pids NAME
       ip [-all] netns exec [NAME] cmd ...
       ip netns monitor
       ip netns list-id

$ ip help
Usage: ip [ OPTIONS ] OBJECT { COMMAND | help }
       ip [ -force ] -batch filename
where  OBJECT := { link | addr | addrlabel | route | rule | neigh | ntable |
                   tunnel | tuntap | maddr | mroute | mrule | monitor | xfrm |
                   netns | l2tp | tcp_metrics | token }
       OPTIONS := { -V[ersion] | -s[tatistics] | -d[etails] | -r[esolve] |
                    -h[uman-readable] | -iec |
                    -f[amily] { inet | inet6 | ipx | dnet | bridge | link } |
                    -4 | -6 | -I | -D | -B | -0 |
                    -l[oops] { maximum-addr-flush-attempts } |
                    -o[neline] | -t[imestamp] | -b[atch] [filename] |
                    -rc[vbuf] [size] | -n[etns] name | -a[ll] }
